/*static method reference with interface.*/
import java.util.Scanner;
interface Mul{
    void mult(int a,int b);
}
public class StatMeth{
    public static void multiply(int x,int y)
    {
        System.out.println("product is "+ x*y);
    }
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        Mul prod=StatMeth::multiply;
        int a1,a2;
        a1=sc.nextInt();
        a2=sc.nextInt();
        prod.mult(a1,a2);
    }
}

/*Instance Method Reference:*/
import java.util.function.BiFunction; 
import java.util.Scanner;
class AddNdSub{
    public int add(int a, int b)
    {
        return a+b;
    }
    public int sub(int a, int b)
    {
        if(a>b)
        {
            return a-b;
        }
        else
        {
            return b-a;
        }
    }
}
    public class InstMeth{
        public static void main(String[] args)
        {
            BiFunction<Integer,Integer,Integer>addition=new AddNdSub()::add;
            int x,y;
            Scanner sc=new Scanner(System.in);
            x=sc.nextInt();
            y=sc.nextInt();
            int r1=addition.apply(x,y);
            
            BiFunction<Integer,Integer,Integer>subt=new AddNdSub()::sub;
            x=sc.nextInt();
            y=sc.nextInt();
            int r2=subt.apply(x,y);
            System.out.println("sum: "+ r1+" difference: "+r2);
        }
    }


/*Consumer:*/
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
public class ConsumerInt{
    static void addList(List<Integer>list)
    {
        int res=list.stream().mapToInt(Integer::intValue).sum();
        System.out.println("sum of list values: "+res);
    }
    
    public static void main(String[] args)
    {
        List<Integer>list=new ArrayList<Integer>();
        list.add(5);
        list.add(10);
        list.add(15);
        list.add(20);
        Consumer<List<Integer>>consumer=ConsumerInt::addList;
        consumer.accept(list);
    }
}

/*Function:*/
import java.util.function.Function;
public class FuncInt{
    static String show(String msg){
        return "Hello" +msg;
    }
    
    public static void main(String[] args)
    {
        Function<String, String> fun=FuncInt::show;
        System.out.println(fun.apply(" User"));
    }
}

/*Predicate:*/
import java.util.function.Predicate;
public class PredicateInt{
    static Boolean checkValidity(int height)
    {
        if(height>130)
        return true;
        else
        return false;
    }
    public static void main(String[] args)
    {
        Predicate<Integer> pred =PredicateInt::checkValidity;
        boolean res=pred.test(135);
        System.out.println(res);
    }
}

/*Supplier:*/
import java.util.function.Supplier;
public class SupplierInt{
    public static void main(String[] args)
    {
        Supplier<Double> value=()->Math.random();
        System.out.println(value.get());
    }
}

/*Default Method access for interface.*/

interface Inter{
    public static int val=100;
    public default void display()
    {
        System.out.println("This is the interface!!");
    }
}


public class InterDef implements Inter{
    public static void main(String[] args)
    {
        InterDef obj= new InterDef();
        System.out.println("Using Default Method:");
        obj.display();
    }
}

/*Static Method access to interface:*/
interface Inter{
    public static int val=100;
    public void demo();
    public static void display()
    {
        System.out.println("Using the Static Method!!");
    }
}

public class InterStat{
    public void demo()
    {
        System.out.println("This is a demo method");
    }
    public static void main(String[] args)
    {
        InterStat obj=new InterStat();
        obj.demo();
        Inter.display();
    }
}

/*Overriding the default method:*/

interface Inter{
    public static int val=100;
    public default void display()
    {
        System.out.println("This is interface display!!");
    }
}

public class InterDef implements Inter{
    public void display()
    {
        System.out.println("Display has been overridden");
    }
    public static void main(String[] args)
    {
        InterDef obj=new InterDef();
        obj.display();
    }
}


/*Default methods accessed using Multiple Inheritance:*/
interface Racing{
    String run();
    String speedUp();
    String slowDown();
    
}
interface Stance{
    default String onTheMarks()
    {
        return "Be on the Marks";
    }
    default String relax()
    {
        return "Be normal";
    }
}
public class Runner implements Racing, Stance {
    private String running;
    
    public String run()
    {
        running="runner is running";
        return running;
    }
    
    public String speedUp()
    {
        return "The runner is speeding up";
    }
    
    public String slowDown()
    {
        return "The runner is slowing down";
    }
    
    public String onTheMarks()
    {
        return "Get on the Marks";
    }
    public String relax()
    {
        return "You can relax now!!";
    }
    public static void main(String[] args)
    {
    Racing race= new Runner();
    Stance pos= new Runner();
    System.out.println("From the stance class: "+ pos.onTheMarks());
    System.out.println("From the race class: "+ race.run());
    }
    
}


/*b)*/
interface EmployeeDet{
    public abstract Employee getEmp(String name, int age, String city);
}

class Employee{
    String name;
    int age;
    String city;
    public Employee(String name, int age, String city)
    {
        this.name=name;
        this.age=age;
        this.city=city;
    }
}

public class Main{
    public static void main(String[] args)
    {
        EmployeeDet empd=Employee::new;
        Employee emp=empd.getEmp("Raj Kumar",35,"Noida");
    }
}
